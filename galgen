#!/bin/bash

#########################################################################################
#### Configuration Section
#########################################################################################

HEIGHT_SMALL=406
HEIGHT_LARGE=768
QUALITY=85
THUMBDIR="thumbnails"
INDEX_HTML_FILE="index.html"
TITLE="Gallery"
# FOOTER='Created with <a href="https://git.infraredcombat.xyz/galgen">galgen</a>'

# Use convert from ImageMagick
CONVERT_COMMAND="magick" 
# Use JHead for EXIF Information
EXIF_COMMAND="jhead"

# Bootstrap 5
CSS="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css"

# Debugging output
# true=enable, false=disable 
DEBUG=true

#########################################################################################
#### End Configuration Section
#########################################################################################


SCRIPT_NAME=$(basename "$0")
DATETIME=$(date -u "+%Y-%m-%d %H:%M:%S")
DATETIME+=" UTC"

function usage {
	RETURN_CODE="$1"
	echo -e "Usage: $SCRIPT_NAME [-t <title>] [-d <thumbdir>] [-h]:
	[-t <title>]\\t sets the title (default: $TITLE)
	[-d <thumbdir>]\\t sets the thumbdir (default: $THUMBDIR)
	[-h]\\t\\t displays help (this message)"
	exit "$RETURN_CODE"
}

function debugOutput(){
	if [[ "$DEBUG" == true ]]; then
		echo "$1" # if debug variable is true, echo whatever's passed to the function
	fi
}

function getFileSize(){
	# Be aware that BSD stat doesn't support --version and -c
	if stat --version &>/dev/null; then
		# GNU
		FILE_SIZE=$(stat -c %s "$1" | awk '{$1/=1000000;printf "%.2fMB\n",$1}')
	else
		# BSD
		FILE_SIZE=$(stat -f %z "$1" | awk '{$1/=1000000;printf "%.2fMB\n",$1}')
	fi
	echo "$FILE_SIZE"
}

while getopts ":t:d:h" opt; do
	case $opt in
	t)
		TITLE="$OPTARG"
		;;
	d)
		THUMBDIR="$OPTARG"
		;;
	h)
		usage 0
		;;
	*)
		echo "Invalid option: -$OPTARG"
		usage 1
		;;
	esac
done

debugOutput "- $SCRIPT_NAME : $DATETIME"

### Check Commands
command -v $CONVERT_COMMAND >/dev/null 2>&1 || { echo >&2 "!!! $CONVERT_COMMAND it's not installed.  Aborting."; exit 1; }
command -v $EXIF_COMMAND >/dev/null 2>&1 || { echo >&2 "!!! $EXIF_COMMAND it's not installed.  Aborting."; exit 1; }

### Create Folders
[[ -d "$THUMBDIR" ]] || mkdir "$THUMBDIR" || exit 2

HEIGHTS[0]=$HEIGHT_SMALL
HEIGHTS[1]=$HEIGHT_LARGE
for RES in "${HEIGHTS[@]}"; do
	[[ -d "$THUMBDIR/$RES" ]] || mkdir -p "$THUMBDIR/$RES" || exit 3
done

#### Create Startpage
debugOutput "$INDEX_HTML_FILE"
cat > "$INDEX_HTML_FILE" << _EOF
<!DOCTYPE HTML>
<html lang="en">
<head>
	<meta charset="utf-8">
	<title>$TITLE</title>
	<meta name="viewport" content="width=device-width">
	<meta name="robots" content="noindex, nofollow">
	<link rel="stylesheet" href="$CSS">
</head>
<body class="bg-black text-white">
<header>
	<div class="navbar navbar-dark bg-dark shadow-sm">
		<div class="container">
			<a href="#" class="navbar-brand">
				<strong>$TITLE</strong>
			</a>
		</div>
	</div>
</header>
<main class="container text-center">
_EOF

### Photos (JPG)
if [[ $(find . -maxdepth 1 -type f -iname \*.jpg | wc -l) -gt 0 ]]; then

ROWS='3'
echo '<div class="row row-cols-3 g-1 py-3">' >> "$INDEX_HTML_FILE"
## Generate Images
NUM_FILES=0
for FILENAME in $(ls -r *.[jJ][pP][gG]); do
	FILELIST[$NUM_FILES]=$FILENAME
	(( NUM_FILES++ ))
	debugOutput "$THUMBDIR/$HEIGHT_SMALL/$FILENAME"
	$CONVERT_COMMAND "$FILENAME" -auto-orient -strip -quality $QUALITY -resize "$HEIGHT_SMALL^>" -gravity center -crop "$HEIGHT_SMALL"x"$HEIGHT_SMALL"+0+0 "$THUMBDIR/$HEIGHT_SMALL/$FILENAME"
	debugOutput "$THUMBDIR/$HEIGHT_LARGE/$FILENAME"
	$CONVERT_COMMAND "$FILENAME" -auto-orient -strip -quality $QUALITY -resize x$HEIGHT_LARGE "$THUMBDIR/$HEIGHT_LARGE/$FILENAME"

	cat >> "$INDEX_HTML_FILE" << _EOF
<div class="col mx-auto">
		<a href="$THUMBDIR/$FILENAME.html"><img src="$THUMBDIR/$HEIGHT_SMALL/$FILENAME" alt="thumbnail: $FILENAME" class="img-fluid"></a>
</div>
_EOF
done
echo '</div>' >> "$INDEX_HTML_FILE"

## Generate the HTML Files for Images in thumbdir
FILE=0
while [[ $FILE -lt $NUM_FILES ]]; do
	FILENAME=${FILELIST[$FILE]}
	PREV=""
	NEXT=""
	[[ $FILE -ne 0 ]] && PREV=${FILELIST[$((FILE - 1))]}
	[[ $FILE -ne $((NUM_FILES - 1)) ]] && NEXT=${FILELIST[$((FILE + 1))]}
	IMAGE_HTML_FILE="$THUMBDIR/$FILENAME.html"
	EXIF_INFO=$($EXIF_COMMAND "$FILENAME")
	FILESIZE=$(getFileSize "$FILENAME")
	debugOutput "$IMAGE_HTML_FILE"
	cat > "$IMAGE_HTML_FILE" << _EOF
<!DOCTYPE HTML>
<html lang="en">
<head>
<meta charset="utf-8">
<title>$FILENAME</title>
<meta name="viewport" content="width=device-width">
<meta name="robots" content="noindex, nofollow">
<link rel="stylesheet" href="$CSS">
</head>
<body class="bg-black text-white">
<header>
	<div class="navbar navbar-dark bg-dark shadow-sm">
		<div class="container">
			<a href="/" class="navbar-brand">
				<strong>$TITLE</strong>
			</a>
		</div>
	</div>
</header>
<main class="container">
_EOF

	# Pager
	echo '<div class="row py-3"><div class="col text-left">' >> "$IMAGE_HTML_FILE"
	if [[ $PREV ]]; then
		echo '<a href="'"$PREV"'.html" accesskey="p" class="btn btn-dark" role="button">&laquo; Previous</a>' >> "$IMAGE_HTML_FILE"
	else
		echo '<a href="#" class="btn btn-dark disabled" role="button" aria-disabled="true">&laquo; Previous</a>' >> "$IMAGE_HTML_FILE"
	fi
	cat >> "$IMAGE_HTML_FILE" << _EOF
</div>
<div class="col d-none d-md-block text-center"><h3>$FILENAME</h3></div>
<div class="col text-end">
_EOF
	if [[ $NEXT ]]; then
		echo '<a href="'"$NEXT"'.html" accesskey="n" class="btn btn-dark">Next &raquo;</a>' >> "$IMAGE_HTML_FILE"
	else
		echo '<a href="#" class="btn btn-dark disabled" role="button" aria-disabled="true">Next &raquo;</a>' >> "$IMAGE_HTML_FILE"
	fi
	echo '</div></div>' >> "$IMAGE_HTML_FILE"

	cat >> "$IMAGE_HTML_FILE" << _EOF
<div class="row">
	<div class="col">
		<p><img src="$HEIGHT_LARGE/$FILENAME" class="img-fluid border border-1 border-dark" alt="Image: $FILENAME"></p>
	</div>
</div>
<div class="row">
	<div class="col">
		<p><a class="btn btn-primary" href="../$FILENAME">View original ($FILESIZE)</a></p>
	</div>
</div>
_EOF

	# EXIF
	if [[ $EXIF_INFO ]]; then
		cat >> "$IMAGE_HTML_FILE" << _EOF
<div class="row">
<div class="col">
<pre>
$EXIF_INFO
</pre>
</div>
</div>
_EOF
	fi

	# Footer
	# cat >> "$IMAGE_HTML_FILE" << _EOF
# </main> <!-- // main container -->
# <br>
# <footer class="footer mt-auto py-3 bg-light">
	# <div class="container">
	# 	<span class="text-muted">$FOOTER - $DATETIME</span>
	# </div>
# </footer>
# </body>
# </html>
# _EOF

	cat >> "$IMAGE_HTML_FILE" << _EOF
</main>
</body>
</html>
_EOF

	(( FILE++ ))
done

fi

### Movies (MOV or MP4)
if [[ $(find . -maxdepth 1 -type f -iname \*.mov  -o -iname '*.mp4' | wc -l) -gt 0 ]]; then
	cat >> "$INDEX_HTML_FILE" << _EOF
	<div class="row">
		<div class="col">
			<div class="page-header"><h2>Movies</h2></div>
		</div>
	</div>
	<div class="row">
	<div class="col">
_EOF
	if [[ $(find . -maxdepth 1 -type f -iname \*.mov | wc -l) -gt 0 ]]; then
	for FILENAME in *.[mM][oO][vV]; do
		FILESIZE=$(getFileSize "$FILENAME")
		cat >> "$INDEX_HTML_FILE" << _EOF
<a href="$FILENAME" class="btn btn-primary" role="button">$FILENAME ($FILESIZE)</a>
_EOF
	done
	fi
	if [[ $(find . -maxdepth 1 -type f -iname \*.mp4 | wc -l) -gt 0 ]]; then
	for FILENAME in *.[mM][pP]4; do
		FILESIZE=$(getFileSize "$FILENAME")
		cat >> "$INDEX_HTML_FILE" << _EOF
<a href="$FILENAME" class="btn btn-primary" role="button">$FILENAME ($FILESIZE)</a>
_EOF
	done
	fi
	echo '</div></div>' >> "$INDEX_HTML_FILE"
fi

### Downloads (ZIP)
if [[ $(find . -maxdepth 1 -type f -iname \*.zip | wc -l) -gt 0 ]]; then
	cat >> "$INDEX_HTML_FILE" << _EOF
	<div class="row">
		<div class="col">
			<div class="page-header"><h2>Downloads</h2></div>
		</div>
	</div>
	<div class="row">
	<div class="col">
_EOF
	for FILENAME in *.[zZ][iI][pP]; do
		FILESIZE=$(getFileSize "$FILENAME")
		cat >> "$INDEX_HTML_FILE" << _EOF
<a href="$FILENAME" class="btn btn-primary" role="button">$FILENAME ($FILESIZE)</a>
_EOF
	done
	echo '</div></div>' >> "$INDEX_HTML_FILE"
fi

### Footer
# cat >> "$INDEX_HTML_FILE" << _EOF
# </main> <!-- // main container -->
# <br>
# <footer class="footer mt-auto py-3 bg-light">
# 	<div class="container">
# 		<span class="text-muted">$FOOTER - $DATETIME</span>
# 	</div>
# </footer>
# </body>
# </html>
# _EOF

cat >> "$INDEX_HTML_FILE" << _EOF
</main>
</body>
</html>
_EOF

debugOutput "= done"
